<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTelemetry.Shims.OpenTracing</name>
    </assembly>
    <members>
        <member name="P:OpenTelemetry.Shims.OpenTracing.ScopeManagerShim.Active">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.ScopeManagerShim.Activate(OpenTracing.ISpan,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:OpenTelemetry.Shims.OpenTracing.ScopeManagerShim.ScopeInstrumentation.Span">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.ScopeManagerShim.ScopeInstrumentation.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim">
            <summary>
            Adapts OpenTracing ISpanBuilder to an underlying OpenTelemetry ISpanBuilder.
            </summary>
            <remarks>Instances of this class are not thread-safe.</remarks>
            <seealso cref="T:OpenTracing.ISpanBuilder" />
        </member>
        <member name="F:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.tracer">
            <summary>
            The tracer.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.spanName">
            <summary>
            The span name.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.links">
            <summary>
            The OpenTelemetry links. These correspond loosely to OpenTracing references.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.attributes">
            <summary>
            The OpenTelemetry attributes. These correspond to OpenTracing Tags.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.parentSpan">
            <summary>
            The parent as an TelemetrySpan, if any.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.parentSpanContext">
            <summary>
            The parent as an SpanContext, if any.
            </summary>
        </member>
        <member name="F:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.explicitStartTime">
            <summary>
            The explicit start time, if any.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.AsChildOf(OpenTracing.ISpanContext)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.AsChildOf(OpenTracing.ISpan)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.AddReference(System.String,OpenTracing.ISpanContext)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.IgnoreActiveSpan">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.Start">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.StartActive">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.StartActive(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.WithStartTimestamp(System.DateTimeOffset)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.WithTag(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.WithTag(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.WithTag(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.WithTag(System.String,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.WithTag(OpenTracing.Tag.BooleanTag,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.WithTag(OpenTracing.Tag.IntOrStringTag,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.WithTag(OpenTracing.Tag.IntTag,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.WithTag(OpenTracing.Tag.StringTag,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.GetOpenTelemetrySpan(OpenTracing.ISpan)">
            <summary>
            Gets an implementation of OpenTelemetry TelemetrySpan from the OpenTracing ISpan.
            </summary>
            <param name="span">The span.</param>
            <returns>an implementation of OpenTelemetry TelemetrySpan.</returns>
            <exception cref="T:System.ArgumentException">span is not a valid SpanShim object.</exception>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanBuilderShim.GetOpenTelemetrySpanContext(OpenTracing.ISpanContext)">
            <summary>
            Gets the OpenTelemetry SpanContext.
            </summary>
            <param name="spanContext">The span context.</param>
            <returns>the OpenTelemetry SpanContext.</returns>
            <exception cref="T:System.ArgumentException">context is not a valid SpanContextShim object.</exception>
        </member>
        <member name="P:OpenTelemetry.Shims.OpenTracing.SpanContextShim.TraceId">
            <inheritdoc/>
        </member>
        <member name="P:OpenTelemetry.Shims.OpenTracing.SpanContextShim.SpanId">
            <inheritdoc/>
        </member>
        <member name="F:OpenTelemetry.Shims.OpenTracing.SpanShim.DefaultEventName">
            <summary>
            The default event name if not specified.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Shims.OpenTracing.SpanShim.Context">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.Finish">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.Finish(System.DateTimeOffset)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.GetBaggageItem(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.Log(System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.Log(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.Log(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.Log(System.DateTimeOffset,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.SetBaggageItem(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.SetOperationName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.SetTag(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.SetTag(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.SetTag(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.SetTag(System.String,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.SetTag(OpenTracing.Tag.BooleanTag,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.SetTag(OpenTracing.Tag.IntOrStringTag,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.SetTag(OpenTracing.Tag.IntTag,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.SetTag(OpenTracing.Tag.StringTag,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.SpanShim.ConvertToEventPayload(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Constructs an OpenTelemetry event payload from an OpenTracing Log key/value map.
            </summary>
            <param name="fields">The fields.</param>
            <returns>A 2-Tuple containing the event name and payload information.</returns>
        </member>
        <member name="P:OpenTelemetry.Shims.OpenTracing.TracerShim.ScopeManager">
            <inheritdoc/>
        </member>
        <member name="P:OpenTelemetry.Shims.OpenTracing.TracerShim.ActiveSpan">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.TracerShim.BuildSpan(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.TracerShim.Extract``1(OpenTracing.Propagation.IFormat{``0},``0)">
            <inheritdoc/>
        </member>
        <member name="M:OpenTelemetry.Shims.OpenTracing.TracerShim.Inject``1(OpenTracing.ISpanContext,OpenTracing.Propagation.IFormat{``0},``0)">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Internal.Guard">
            <summary>
            Methods for guarding against exception throwing values.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throw an exception if the value is null.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or empty.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or whitespace.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfZero(System.Int32,System.String,System.String)">
            <summary>
            Throw an exception if the value is zero.
            </summary>
            <param name="value">The value to check.</param>
            <param name="message">The message to use in the thrown exception.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfInvalidTimeout(System.Int32,System.String)">
            <summary>
            Throw an exception if the value is not considered a valid timeout.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Double,System.String,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNotOfType``1(System.Object,System.String)">
            <summary>
            Throw an exception if the value is not of the expected type.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <typeparam name="T">The type attempted to convert to.</typeparam>
            <returns>The value casted to the specified type.</returns>
        </member>
    </members>
</doc>
