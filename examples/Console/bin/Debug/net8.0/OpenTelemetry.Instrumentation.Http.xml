<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTelemetry.Instrumentation.Http</name>
    </assembly>
    <members>
        <member name="M:OpenTelemetry.Instrumentation.DiagnosticSourceSubscriber.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.ListenerHandler">
            <summary>
            ListenerHandler base class.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.ListenerHandler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/> class.
            </summary>
            <param name="sourceName">The name of the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/>.</param>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.ListenerHandler.SourceName">
            <summary>
            Gets the name of the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/>.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.ListenerHandler.SupportsNullActivity">
            <summary>
            Gets a value indicating whether the <see cref="T:OpenTelemetry.Instrumentation.ListenerHandler"/> supports NULL <see cref="T:System.Diagnostics.Activity"/>.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.ListenerHandler.OnEventWritten(System.String,System.Object)">
            <summary>
            Method called for an event which does not have 'Start', 'Stop' or 'Exception' as suffix.
            </summary>
            <param name="name">Custom name.</param>
            <param name="payload">An object that represent the value being passed as a payload for the event.</param>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.PropertyFetcher`1">
            <summary>
            PropertyFetcher fetches a property from an object.
            </summary>
            <typeparam name="T">The type of the property being fetched.</typeparam>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.PropertyFetcher`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Instrumentation.PropertyFetcher`1"/> class.
            </summary>
            <param name="propertyName">Property name to fetch.</param>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.PropertyFetcher`1.TryFetch(System.Object,`0@)">
            <summary>
            Try to fetch the property from the object.
            </summary>
            <param name="obj">Object to be fetched.</param>
            <param name="value">Fetched value.</param>
            <returns><see langword= "true"/> if the property was fetched.</returns>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Http.HttpClientInstrumentation">
            <summary>
            HttpClient instrumentation.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Http.HttpClientInstrumentation.#ctor(OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Instrumentation.Http.HttpClientInstrumentation"/> class.
            </summary>
            <param name="options">Configuration options for HTTP client instrumentation.</param>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Http.HttpClientInstrumentation.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Http.HttpClientMetrics">
            <summary>
            HttpClient instrumentation.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Http.HttpClientMetrics.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenTelemetry.Instrumentation.Http.HttpClientMetrics"/> class.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Http.HttpClientMetrics.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions">
            <summary>
            Options for HttpClient instrumentation.
            </summary>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions.FilterHttpRequestMessage">
            <summary>
            Gets or sets a filter function that determines whether or not to
            collect telemetry on a per request basis.
            </summary>
            <remarks>
            <para><b>FilterHttpRequestMessage is only executed on .NET and .NET
            Core runtimes. <see cref="T:System.Net.Http.HttpClient"/> and <see
            cref="T:System.Net.HttpWebRequest"/> on .NET and .NET Core are both implemented
            using <see cref="T:System.Net.Http.HttpRequestMessage"/>.</b></para>
            Notes:
            <list type="bullet">
            <item>The return value for the filter function is interpreted as:
            <list type="bullet">
            <item>If filter returns <see langword="true" />, the request is
            collected.</item>
            <item>If filter returns <see langword="false" /> or throws an
            exception the request is NOT collected.</item>
            </list></item>
            </list>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions.EnrichWithHttpRequestMessage">
            <summary>
            Gets or sets an action to enrich an <see cref="T:System.Diagnostics.Activity"/> with <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
            <remarks>
            <para><b>EnrichWithHttpRequestMessage is only executed on .NET and .NET
            Core runtimes. <see cref="T:System.Net.Http.HttpClient"/> and <see
            cref="T:System.Net.HttpWebRequest"/> on .NET and .NET Core are both implemented
            using <see cref="T:System.Net.Http.HttpRequestMessage"/>.</b></para>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions.EnrichWithHttpResponseMessage">
            <summary>
            Gets or sets an action to enrich an <see cref="T:System.Diagnostics.Activity"/> with <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
            <remarks>
            <para><b>EnrichWithHttpResponseMessage is only executed on .NET and .NET
            Core runtimes. <see cref="T:System.Net.Http.HttpClient"/> and <see
            cref="T:System.Net.HttpWebRequest"/> on .NET and .NET Core are both implemented
            using <see cref="T:System.Net.Http.HttpRequestMessage"/>.</b></para>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions.EnrichWithException">
            <summary>
            Gets or sets an action to enrich an <see cref="T:System.Diagnostics.Activity"/> with <see cref="T:System.Exception"/>.
            </summary>
            <remarks>
            <para><b>EnrichWithException is called for all runtimes.</b></para>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions.FilterHttpWebRequest">
            <summary>
            Gets or sets a filter function that determines whether or not to
            collect telemetry on a per request basis.
            </summary>
            <remarks>
            <para><b>FilterHttpWebRequest is only executed on .NET Framework
            runtimes. <see cref="T:System.Net.Http.HttpClient"/> and <see cref="T:System.Net.HttpWebRequest"/>
            on .NET Framework are both implemented using <see
            cref="T:System.Net.HttpWebRequest"/>.</b></para>
            Notes:
            <list type="bullet">
            <item>The return value for the filter function is interpreted as:
            <list type="bullet">
            <item>If filter returns <see langword="true" />, the request is
            collected.</item>
            <item>If filter returns <see langword="false" /> or throws an
            exception the request is NOT collected.</item>
            </list></item>
            </list>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions.EnrichWithHttpWebRequest">
            <summary>
            Gets or sets an action to enrich an <see cref="T:System.Diagnostics.Activity"/> with <see cref="T:System.Net.HttpWebRequest"/>.
            </summary>
            <remarks>
            <para><b>EnrichWithHttpWebRequest is only executed on .NET Framework
            runtimes. <see cref="T:System.Net.Http.HttpClient"/> and <see cref="T:System.Net.HttpWebRequest"/>
            on .NET Framework are both implemented using <see
            cref="T:System.Net.HttpWebRequest"/>.</b></para>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions.EnrichWithHttpWebResponse">
            <summary>
            Gets or sets an action to enrich an <see cref="T:System.Diagnostics.Activity"/> with <see cref="T:System.Net.HttpWebResponse"/>.
            </summary>
            <remarks>
            <para><b>EnrichWithHttpWebResponse is only executed on .NET Framework
            runtimes. <see cref="T:System.Net.Http.HttpClient"/> and <see cref="T:System.Net.HttpWebRequest"/>
            on .NET Framework are both implemented using <see
            cref="T:System.Net.HttpWebRequest"/>.</b></para>
            </remarks>
        </member>
        <member name="P:OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions.RecordException">
            <summary>
            Gets or sets a value indicating whether exception will be recorded
            as an <see cref="T:System.Diagnostics.ActivityEvent"/> or not. Default value: <see
            langword="false"/>.
            </summary>
            <remarks>
            <para><b>RecordException is supported on all runtimes.</b></para>
            <para>For specification details see: <see
            href="https://github.com/open-telemetry/semantic-conventions/blob/main/docs/exceptions/exceptions-spans.md"
            />.</para>
            </remarks>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Http.Implementation.HttpInstrumentationEventSource">
            <summary>
            EventSource events emitted from the project.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Instrumentation.Http.Implementation.HttpTagHelper">
            <summary>
            A collection of helper methods to be used when building Http activities.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Instrumentation.Http.Implementation.HttpTagHelper.GetUriTagValueFromRequestUri(System.Uri)">
            <summary>
            Gets the OpenTelemetry standard uri tag value for a span based on its request <see cref="T:System.Uri"/>.
            </summary>
            <param name="uri"><see cref="T:System.Uri"/>.</param>
            <returns>Span uri value.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.ActivityHelperExtensions">
            <summary>
            Extension methods on Activity.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.TryGetStatus(System.Diagnostics.Activity,OpenTelemetry.Trace.StatusCode@,System.String@)">
            <summary>
            Gets the status of activity execution.
            Activity class in .NET does not support 'Status'.
            This extension provides a workaround to retrieve Status from special tags with key name otel.status_code and otel.status_description.
            </summary>
            <param name="activity">Activity instance.</param>
            <param name="statusCode"><see cref="T:OpenTelemetry.Trace.StatusCode"/>.</param>
            <param name="statusDescription">Status description.</param>
            <returns><see langword="true"/> if <see cref="T:OpenTelemetry.Trace.Status"/> was found on the supplied Activity.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.GetTagValue(System.Diagnostics.Activity,System.String)">
            <summary>
            Gets the value of a specific tag on an <see cref="T:System.Diagnostics.Activity"/>.
            </summary>
            <param name="activity">Activity instance.</param>
            <param name="tagName">Case-sensitive tag name to retrieve.</param>
            <returns>Tag value or null if a match was not found.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.ActivityHelperExtensions.TryCheckFirstTag(System.Diagnostics.Activity,System.String,System.Object@)">
            <summary>
            Checks if the user provided tag name is the first tag of the <see cref="T:System.Diagnostics.Activity"/> and retrieves the tag value.
            </summary>
            <param name="activity">Activity instance.</param>
            <param name="tagName">Tag name.</param>
            <param name="tagValue">Tag value.</param>
            <returns><see langword="true"/> if the first tag of the supplied Activity matches the user provide tag name.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.SemanticConventions">
            <summary>
            Constants for semantic attribute names outlined by the OpenTelemetry specifications.
            <see href="https://github.com/open-telemetry/semantic-conventions/blob/main/docs/general/trace.md"/> and
            <see href="https://github.com/open-telemetry/semantic-conventions/blob/main/docs/general/metrics.md"/>.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.SpanAttributeConstants">
            <summary>
            Defines well-known span attribute keys.
            </summary>
        </member>
        <member name="T:OpenTelemetry.Trace.SpanHelper">
            <summary>
            A collection of helper methods to be used when building spans.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.SpanHelper.ResolveSpanStatusForHttpStatusCode(System.Diagnostics.ActivityKind,System.Int32)">
            <summary>
            Helper method that populates span properties from http status code according
            to https://github.com/open-telemetry/semantic-conventions/blob/main/docs/http/http-spans.md#common-attributes.
            </summary>
            <param name="kind">The span kind.</param>
            <param name="httpStatusCode">Http status code.</param>
            <returns>Resolved span <see cref="T:OpenTelemetry.Trace.Status"/> for the Http status code.</returns>
        </member>
        <member name="T:OpenTelemetry.Trace.HttpClientInstrumentationTracerProviderBuilderExtensions">
            <summary>
            Extension methods to simplify registering of HttpClient instrumentation.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Trace.HttpClientInstrumentationTracerProviderBuilderExtensions.AddHttpClientInstrumentation(OpenTelemetry.Trace.TracerProviderBuilder)">
            <summary>
            Enables HttpClient instrumentation.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> being configured.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.HttpClientInstrumentationTracerProviderBuilderExtensions.AddHttpClientInstrumentation(OpenTelemetry.Trace.TracerProviderBuilder,System.Action{OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions})">
            <summary>
            Enables HttpClient instrumentation.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> being configured.</param>
            <param name="configureHttpClientTraceInstrumentationOptions">Callback action for configuring <see cref="T:OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions"/>.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Trace.HttpClientInstrumentationTracerProviderBuilderExtensions.AddHttpClientInstrumentation(OpenTelemetry.Trace.TracerProviderBuilder,System.String,System.Action{OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions})">
            <summary>
            Enables HttpClient instrumentation.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> being configured.</param>
            <param name="name">Name which is used when retrieving options.</param>
            <param name="configureHttpClientTraceInstrumentationOptions">Callback action for configuring <see cref="T:OpenTelemetry.Instrumentation.Http.HttpClientTraceInstrumentationOptions"/>.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Trace.TracerProviderBuilder"/> to chain the calls.</returns>
        </member>
        <member name="M:OpenTelemetry.Internal.ExceptionExtensions.ToInvariantString(System.Exception)">
            <summary>
            Returns a culture-independent string representation of the given <paramref name="exception"/> object,
            appropriate for diagnostics tracing.
            </summary>
            <param name="exception">Exception to convert to string.</param>
            <returns>Exception as string with no culture.</returns>
        </member>
        <member name="T:OpenTelemetry.Internal.Guard">
            <summary>
            Methods for guarding against exception throwing values.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throw an exception if the value is null.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or empty.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throw an exception if the value is null or whitespace.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfZero(System.Int32,System.String,System.String)">
            <summary>
            Throw an exception if the value is zero.
            </summary>
            <param name="value">The value to check.</param>
            <param name="message">The message to use in the thrown exception.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfInvalidTimeout(System.Int32,System.String)">
            <summary>
            Throw an exception if the value is not considered a valid timeout.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfOutOfRange(System.Double,System.String,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
            Throw an exception if the value is not within the given range.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <param name="min">The inclusive lower bound.</param>
            <param name="max">The inclusive upper bound.</param>
            <param name="minName">The name of the lower bound.</param>
            <param name="maxName">The name of the upper bound.</param>
            <param name="message">An optional custom message to use in the thrown exception.</param>
        </member>
        <member name="M:OpenTelemetry.Internal.Guard.ThrowIfNotOfType``1(System.Object,System.String)">
            <summary>
            Throw an exception if the value is not of the expected type.
            </summary>
            <param name="value">The value to check.</param>
            <param name="paramName">The parameter name to use in the thrown exception.</param>
            <typeparam name="T">The type attempted to convert to.</typeparam>
            <returns>The value casted to the specified type.</returns>
        </member>
        <member name="T:OpenTelemetry.Metrics.HttpClientInstrumentationMeterProviderBuilderExtensions">
            <summary>
            Extension methods to simplify registering of HttpClient instrumentation.
            </summary>
        </member>
        <member name="M:OpenTelemetry.Metrics.HttpClientInstrumentationMeterProviderBuilderExtensions.AddHttpClientInstrumentation(OpenTelemetry.Metrics.MeterProviderBuilder)">
            <summary>
            Enables HttpClient instrumentation.
            </summary>
            <param name="builder"><see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> being configured.</param>
            <returns>The instance of <see cref="T:OpenTelemetry.Metrics.MeterProviderBuilder"/> to chain the calls.</returns>
        </member>
    </members>
</doc>
